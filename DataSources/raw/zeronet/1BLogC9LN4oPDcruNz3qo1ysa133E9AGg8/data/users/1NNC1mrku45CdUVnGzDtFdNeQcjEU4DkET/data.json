{
	"next_comment_id": 5,
	"comment": [
		{
			"comment_id": 1,
			"body": "I just begin to develop a commissioned site for ZeroNet, I found serious issues for what ambitions to be an alternative to TOR and classic Internet:\n\n1- Documentation Flaws everywhere, it's a shame, the instructions provided seems should work on Windows I don't know I'm on Ubuntu 16.04 and macOS elcapitan where I use to develop complex Ajax/JQuery/DJango sites and I found ZeroNet Documentation UN-WORKEABLE period.\n\na.e. when I ran: $> python zeronet.py siteCreate \nI only get: import errors.\n\nAlso I have an Mac same issue the instructions provided don work on OSX, should one read comments to find a workaround, it's an shame.\n\n2nd I love the way ZeroNet is implemented but I hate some its current code.\nExcellent to use .json and torrent sync/distribution to sync/publish site/dynamic content, also using bitcoin address as ZeroNet Address/Site Keys it clever and polite, I love this design as its robust and moreles perfect. but stop here.\n\n2a code accessibility: the samples, seems targeted only to long experienced Zeronet developers, some of the code I reviewed is deliberately or accidentally obscure, whatever is not accessible thats kick-aways casual developers only ones with commissioned works (as me) battle those things, you should re-write all your sample wit enough comments documentation on each section, and never consider the audience is expert on A or Be framework or IDE or OS.\n\n2b CoffeeScript: I save you on your preference on  CoffeeScript instead JQuery and just plain javascript, but also is not right, CoffeeScript has its exceptional advantages, is whatever you want but not an popular API, most colleagues hate it (repeat Hate It, being deserved or not is the reality). You should re-work your samples and some of the site code on community popular standard as JQuery or Just plain Java and make it more appealing (easy to read) to the developer masses, I can program using CoffeeScript but I prefer o avoid it on serious sites due the same issue, is not popular among developers and is a pain in the ass to find some one interested to maintain a CoffeeScript based site.\n\nIf you really want ZeroNet ro reach a big audience (as deserves, it's an excelent project with transcendental possibilities), you should solve these basic issues: \n\n* Client/Code/Samples portability (Linux/Mac/Windows version should work as indicated without workarounds or at least you should segregate detailed instructions for each operating system).\n\n* Obscure Sample Code: I'm fascinated how good are you guys, sometimes I read your code and I'm ashamed on what I do, its fantastic, your abilities are outside the common, but this is a double-edge sword: developers not as good as you cant easy learn with this code, the learning curve is too steep, you should follow the KISS philosophy approaching the coders, if you show them a sample, show one they can understand from first line of code, not assume people will go to desperately learn advanced CoffeeScript site development just to reads your samples, wont do will leave, so there is the need you have to re-write all those samples on more simple code. despite not the most efficient, efficiency is an advanced issue not a learning priority if you want ZeroNet sites to grown.\n\n* URGENT Improve Project Documentation and Linux/ macOS directions, if you don know ask the community dont force rookies to read all the comments as documentation last resource, rookies dont go deep, they leave period.\n\n* Adopt community popular programming std, CoffeeScript is not bad, but you should admit is not popular neither you can easy seduce the community to adopt it.\n\nOptional: consider to move ZeroNet Client to Kivy and build for it some basic but minimal intuitive GUI and/or console.\n\nGood news for you ZeroNet team: after deep reading the documentation I consider I could re-code some of the zeronet api to run inside django and create dynamic double-network sites (on classic http web and Zeronet) on the same site with same site basic code it's very possible.\n\nMy hope this critic being the most constructive possible, you have an project with awesome potential\n\nI Give you my congratulations and Best Regards,\nMago",
			"post_id": 43,
			"date_added": 1469291391
		},
		{
			"comment_id": 2,
			"body": "those on Ubuntu read:\nto run the commands referenced by this tutorial on our platform, instead typing \"python zeronet.py WhatEverCommand(s)..\", we should use\n\n>.\\ZeroNet.sh WhatEverCommand(s)...\n\nAvoid the coffee-script/NodeJS dependencies hell, follow the following directions prior first call to \".\\ZeroNet.sh --debug\"  (to compile zeronet's .coffee):\n\nUnistall and clean NodeJS\n>sudo apt-get purge nodejs node npm #if you need npm for other taks, install it later, Google for help\n\nInstall Latest ESTABLE 4.X NodeJS:\n\n>curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -\n>sudo apt-get install -y nodejs\n\nUpdate the simlink from node to nodejs:\n\n>sudo rm /usr/bin/node\n>sudo ln -s \"$(which nodejs)\" /usr/bin/node\n\nThen and only after the complete all the previous steps, you can install coffee-script but avoid npm, its problematic, instead use apt-get (an reliable coffee-script installer resides in the Universe Repo -enable this repo if you dont have enabled yet-)\n\n>sudo apt-get update #only if you just enabled the universe repo, otherwise not needed\n>sudo apt-get install coffeescript\n\nreboot just to double down.\n\n> reboot\n\nmore, be careful on text encoding, coffee-script skips files not in ASCII encoding (as the ubiquitous utf-8), my suggestion is to use gedit as editor, it just work if you install this package \"https://github.com/wavded/gedit-coffeescript\"  also highlights coffee-script syntax. my personal preference is pycharm but I only have pro license on my mac not on my linux system (which I use for minor tasks).\n\nNow you can follow the tutorial.\n\\\\============================================================\nLater I'll post a similar guide for macOS (p.k.a. OS/X).\n\nPD. about the example, there is a minor typo at :\n\n\"<script type=\"text/javascript\" src=\"js/all.js\" async></script>\" \n\ninstead async, you should use asyc (w/o 'n), just like this:\n\n<script type=\"text/javascript\" src=\"js/all.js\" asyc></script>'\n\n\\\\============================================================\n\n@bot:\nI'm aware every .coffee when compiled get into javascript (this is what coffeescript does), my complaint is that JavaScript code should be the one with the comments and developer guides that will help them to understand ZeroNet.",
			"post_id": 43,
			"date_added": 1469383901
		},
		{
			"comment_id": 3,
			"body": "Those on macOS read:\nTo run Zeronet, rename the file \"ZeroNet.app\" in the Zerobundle to \"ZeroNet.sh\" then run with\n> $ sh ZeroNet.sh\n\nor\n>$ sh ZeroNet.sh --debug",
			"post_id": 43,
			"date_added": 1469912606
		},
		{
			"comment_id": 4,
			"body": "Tips to avoid CoffeScript's \"indentation Hell\":\nUse an CoffeScript certified editor with ASCSI explicit file encoding support, my personal choice is pyCharm Professional (community has no CoffeScript support), then harmonize the Indent to \"2 spaces\" ACROSS THE WHOLE PROJECT (check ZeroFrame.coffe also).\nthose compiling .coffee from command line, ADD an BLANK LINE AT THE END OF EACH PROJECT FILE\nsince\n>$ cat lib/*.coffee ZeroChat.coffee | coffee --compile --stdio  > all.js\n\njust concatenates the .coffee files before compile thus the first line at a .coffee file may appear to be  a continuation from the last one on the previous one.\n",
			"post_id": 43,
			"date_added": 1469913059
		}
	],
	"comment_vote": {},
	"topic_vote": {}
}